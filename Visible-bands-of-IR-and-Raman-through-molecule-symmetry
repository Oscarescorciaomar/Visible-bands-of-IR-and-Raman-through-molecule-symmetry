import pandas as pd
import numpy as np


############### Determination the bands visible in IR and Raman with puntal group = C3V ######################
datac3v = pd.read_excel('GP.xlsx', usecols= ('E', '2C3', '3sigma'))

Dataarr = np.array(datac3v)

DataarrT = np.transpose(Dataarr)

######## Change atoms that don't move - Las two number each file###############

List1 = [1, 1, 1, 4, 3]
List2 = [1, 1, -1, 1, 0]
List3 = [2, -1, 0, 2, 1]
E = 1 ; C3 = 2 ; sig = 3

def elementsproduct(List):
    product= 1

    for number in List:
    product *= number
    return product

A1 = (elementsproduct([List1[-1],List1[-2],List1[0],E]) + elementsproduct([List2[-5],List2[-2],List1[1],C3]) +
      + elementsproduct([List3[-1],List3[-2],List1[-3],sig]))
A1_ = int(A1/6)
A2 = (elementsproduct([List1[-1], List1[-2], List2[0], E]) + elementsproduct([List2[-1], List2[-2],List2[1], C3])
     + elementsproduct([List3[-1],List3[-2], List2[2],sig]))
A2_ = int(A2/6)
E = (elementsproduct([List1[-1],List1[-2], List3[0], E]) + elementsproduct([List2[-1], List2[-2], List3[1], C3])
    + elementsproduct([List3[-1],List3[-2], List3[2], sig]))
E_ = int(E/6)

A1tras = 1 ; Etras = 1 ; A2rot =1 ;  Erot = 1

def subtraction(List):
    subtraction = 0

    for number in List:
         subtraction -= number

    return subtraction

A1vib = (-A1_, A1tras)  ######## Reducible character A1 for vibrations########
A2vib = (-A2_, A2rot)      ######## Reducible character A2 for vibrations ########
Evib = (-E_, Erot, Etras)    ######## Reducible character E for vibrations ########

#print(subtraction(Evib))

############### Determination the bands visible in IR and Raman with puntal group = C2V ######################

datac2v = pd.read_excel('GP.xlsx', usecols= ('E', 'C2', 'sigv', 'sigvpri'), sheet_name = "C2v")

Datac2varr = np.array(datac2v)

Datac2varrT = np.transpose(Datac2varr)

List1_ = [1, 1, 1, 1, 3, 3]
List2_ = [1, 1, -1, -1, 1,-1]
List3_ = [1, -1, 1, -1, 3, 1]
List4_ = [1,-1, -1, 1, 1, 1]
E1 = 1 ; C22 = 1 ; sigv = 1 ;sigvpri = 1

def elementsproduct(List):
  product = 1

  for number in List:
    product *= number
  return product

A1__ = (elementsproduct([List1_[-1],List1_[-2],List1_[0],E1]) + elementsproduct([List2_[-1],List2_[-2],List2_[0],C22])
+ elementsproduct([List3_[-1],List3_[-2],List3_[0],sigv]) + elementsproduct([List4_[-1], List4_[-2], List4_[0],sigvpri]))
A_1 = int(A1__/4)
A2__ = (elementsproduct([List1_[-1],List1_[-2],List1_[1], E1]) + elementsproduct([List2_[-1],List2_[-2], List2_[1],C22])
+ elementsproduct([List3_[-1],List3_[-2], List3_[1], sigv]) + elementsproduct([List4_[-1], List4_[-2], List4_[1], sigvpri]))
A_2 = int(A2__/4)
B1 = ( elementsproduct([List1_[-1],List1_[-2],List1_[2], E1]) + elementsproduct([List2_[-1],List2_[-2], List2_[2],C22])
+ elementsproduct([List3_[-1],List3_[-2], List3_[2], sigv]) + elementsproduct([List4_[-1], List4_[-2], List4_[2], sigvpri]))
B_1 = int(B1/4)
B2 = (elementsproduct([List1_[-1],List1_[-2],List1_[3], E1]) + elementsproduct([List2_[-1],List2_[-2], List2_[3],C22])
+ elementsproduct([List3_[-1],List3_[-2], List3_[3], sigv]) + elementsproduct([List4_[-1], List4_[-2], List4_[3], sigvpri]))
B_2 = int(B2/4)

A1tras = -1 ;  B1tras = -1 ; B2tras = -1 ; A2rot =-1 ; B1rot =-1 ; B2rot =-1

def subtraction(List):
    subtraction = 0

    for number in List:
         subtraction -= number

    return subtraction

A1vib = (-A_1, -A1tras)  ######## Reducible character A1 for vibrations########
A2vib = (-A_2, -A2rot)      ######## Reducible character A2 for vibrations ########
B1vib = (-B_1, -B1tras, -B1rot)    ######## Reducible character B1 for vibrations ########
B2vib = ( -B_2,-B2tras, -B2rot )  ######## Reducible character B2 for vibrations ########

#print(subtraction(A1vib))

############### Determination the bands visible in IR and Raman with puntal group = C2h ######################

datac2h = pd.read_excel('GP.xlsx', usecols= ('E', 'C2', 'i', 'sigh'), sheet_name = "C2h")

Datac2harr = np.array(datac2h)

Datac2harrT = np.transpose(Datac2harr)

Lista1__ = [1, 1, 1, 1, 4, 3]
Lista2__ = [1, 1, -1, -1, 0,-1]
Lista3__ = [1, -1, 1, -1, 0, -3]
Lista4__= [1,-1, -1, 1, 4, 1]
E1_ = 1 ; C2_ = 1 ; i= 1 ; sigh = 1

def productoelementos(Lista):
  producto = 1

  for numero in Lista:
    producto *= numero
  return producto

Ag = (productoelementos([Lista1__[-1],Lista1__[-2],Lista1__[0],E1_]) + productoelementos([Lista2__[-1],Lista2__[-2],Lista2__[0],C2_])
      +  productoelementos([Lista3__[-1],Lista3__[-2],Lista3__[0],i]) + productoelementos([Lista4__[-1], Lista4__[-2], Lista4__[0],sigh]))
Ag_ = int(Ag/4)
Bg = (productoelementos([Lista1__[-1],Lista1__[-2],Lista1__[1], E1_]) + productoelementos([Lista2__[-1],Lista2__[-2], Lista2__[1],C2_])
       + productoelementos([Lista3__[-1],Lista3__[-2], Lista3__[1], i]) + productoelementos([Lista4__[-1], Lista4__[-2], Lista4__[1], sigh]))
Bg_ = int(Bg/4)
Au =(productoelementos([Lista1__[-1],Lista1__[-2],Lista1__[2], E1_]) + productoelementos([Lista2__[-1],Lista2__[-2], Lista2__[2],C2_])
    + productoelementos([Lista3__[-1],Lista3__[-2], Lista3__[2], i])+ productoelementos([Lista4__[-1], Lista4__[-2], Lista4__[2], sigh]))
Au_ = int(Au/4)
Bu = (productoelementos([Lista1__[-1],Lista1__[-2],Lista1__[3], E1_])+ productoelementos([Lista2__[-1],Lista2__[-2], Lista2__[3],C2_])
       + productoelementos([Lista3__[-1],Lista3__[-2], Lista3__[3], i]) + productoelementos([Lista4__[-1], Lista4__[-2], Lista4__[3], sigh]))
Bu_ = int(Bu/4)

Autras = 1 ; Butras = 1 ; AgRot = 1 ; BgRot =1

def subtraction(List):
    subtraction = 0

    for number in List:
         subtraction -= number

    return subtraction

Agvib = (-Ag_, AgRot)  ######## Reducible character Ag for vibrations########
Bgvib = (-Bg_, BgRot)      ######## Reducible character Bg for vibrations ########
Auvib = (-Au_, Autras)    ######## Reducible character Au for vibrations ########
Buvib = ( -Bu_,Butras )  ######## Reducible character Bu for vibrations ########

#print(subtraction(Buvib))

############### Determination the bands visible in IR and Raman with puntal group = D3 ######################

dataD3 = pd.read_excel('GP.xlsx', usecols= ('E', '2C3', '3C2'), sheet_name = "D3")

DataD3arr = np.array(dataD3)

DataD3arrT = np.transpose(DataD3arr)

List1___ = [1, 1, 2, 19, 3]
List2___ = [1, 1, -1, 1, 0]
List3___ = [1, -1, 0, 1, -1]
E_ = 1 ;  C3_ = 2 ; C2_= 3

def elementsproduct(List):
  product = 1

  for number in List:
    product *= number
  return product

A_1_ = (elementsproduct([List1___[-1],List1___[-2],List1___[0],E_]) +elementsproduct([List2___[-1],List2___[-2],List2___[0],C3_])
+ elementsproduct([List3___[-1],List3___[-2],List3___[0],C2_]))
A_1__ = int(A_1_/6)
A_2_ = (elementsproduct([List1___[-1],List1___[-2],List1___[1],E_]) + elementsproduct([Lista2___[-1],Lista2___[-2],Lista2___[1],C3_])
+ elementsproduct([List3___[-1],List3___[-2],List3___[1],C2_]))
A_2__ = int(A_2_/6)
E_1_ = (elementsproduct([List1___[-1],List1___[-2],List1___[2],E_]) + elementsproduct([List2___[-1],List2___[-2],List2___[2],C3_])
+ elementsproduct([List3___[-1],List3___[-2],List3___[2],C2_]))
E_1__ = int(E_1_/6)
A_2tras = 1 ; E_1tras = 1 ; A_2Rot = 1 ; E_1Rot =1

def subtraction(List):
    subtraction = 0

    for number in List:
         subtraction -= number

    return subtraction

A_1vib = (-A_1__,0)  ######## Reducible character A1 for vibrations########
A_2vib = (-A_2__ , A_2tras, A_2Rot)      ######## Reducible character A2 for vibrations ########
E_1vib = (-E_1__, E_1tras, E_1Rot)    ######## Reducible character E for vibrations ########

#print(subtraction(E_1vib))
